Terminals unused in grammar

   KW_BOOL


State 11 conflicts: 1 shift/reduce


Grammar

    0 $accept: lines $end

    1 lines: lines expr '\n'
    2      | lines bexpr '\n'
    3      | lines comp '\n'
    4      | lines declar '\n'
    5      | lines assign '\n'
    6      | %empty

    7 expr: expr '+' expr
    8     | expr '-' expr
    9     | expr '*' expr
   10     | expr '/' expr
   11     | '(' expr ')'
   12     | ID
   13     | FRACT

   14 bexpr: bexpr OR bexpr
   15      | bexpr AND bexpr
   16      | NOT bexpr
   17      | '(' bexpr ')'
   18      | comp
   19      | BOOL

   20 comp: expr EQ expr
   21     | expr NE expr
   22     | expr LT expr
   23     | expr GT expr
   24     | expr LE expr
   25     | expr GE expr

   26 declar: KW_FRACT ID ';'

   27 assign: ID '=' expr ';'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1 2 3 4 5
'(' (40) 11 17
')' (41) 11 17
'*' (42) 9
'+' (43) 7
'-' (45) 8
'/' (47) 10
';' (59) 26 27
'=' (61) 27
error (256)
ID (258) 12 26 27
FRACT (259) 13
BOOL (260) 19
KW_FRACT (261) 26
KW_BOOL (262)
OR (263) 14
AND (264) 15
NOT (265) 16
EQ (266) 20
NE (267) 21
LT (268) 22
GT (269) 23
LE (270) 24
GE (271) 25


Nonterminals, with rules where they appear

$accept (26)
    on left: 0
lines (27)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
expr (28)
    on left: 7 8 9 10 11 12 13, on right: 1 7 8 9 10 11 20 21 22 23
    24 25 27
bexpr (29)
    on left: 14 15 16 17 18 19, on right: 2 14 15 16 17
comp (30)
    on left: 20 21 22 23 24 25, on right: 3 18
declar (31)
    on left: 26, on right: 4
assign (32)
    on left: 27, on right: 5


State 0

    0 $accept: . lines $end

    $default  reduce using rule 6 (lines)

    lines  go to state 1


State 1

    0 $accept: lines . $end
    1 lines: lines . expr '\n'
    2      | lines . bexpr '\n'
    3      | lines . comp '\n'
    4      | lines . declar '\n'
    5      | lines . assign '\n'

    $end      shift, and go to state 2
    ID        shift, and go to state 3
    FRACT     shift, and go to state 4
    BOOL      shift, and go to state 5
    KW_FRACT  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    expr    go to state 9
    bexpr   go to state 10
    comp    go to state 11
    declar  go to state 12
    assign  go to state 13


State 2

    0 $accept: lines $end .

    $default  accept


State 3

   12 expr: ID .
   27 assign: ID . '=' expr ';'

    '='  shift, and go to state 14

    $default  reduce using rule 12 (expr)


State 4

   13 expr: FRACT .

    $default  reduce using rule 13 (expr)


State 5

   19 bexpr: BOOL .

    $default  reduce using rule 19 (bexpr)


State 6

   26 declar: KW_FRACT . ID ';'

    ID  shift, and go to state 15


State 7

   16 bexpr: NOT . bexpr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    BOOL   shift, and go to state 5
    NOT    shift, and go to state 7
    '('    shift, and go to state 8

    expr   go to state 17
    bexpr  go to state 18
    comp   go to state 19


State 8

   11 expr: '(' . expr ')'
   17 bexpr: '(' . bexpr ')'

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    BOOL   shift, and go to state 5
    NOT    shift, and go to state 7
    '('    shift, and go to state 8

    expr   go to state 20
    bexpr  go to state 21
    comp   go to state 19


State 9

    1 lines: lines expr . '\n'
    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   20 comp: expr . EQ expr
   21     | expr . NE expr
   22     | expr . LT expr
   23     | expr . GT expr
   24     | expr . LE expr
   25     | expr . GE expr

    '+'   shift, and go to state 22
    '-'   shift, and go to state 23
    '*'   shift, and go to state 24
    '/'   shift, and go to state 25
    EQ    shift, and go to state 26
    NE    shift, and go to state 27
    LT    shift, and go to state 28
    GT    shift, and go to state 29
    LE    shift, and go to state 30
    GE    shift, and go to state 31
    '\n'  shift, and go to state 32


State 10

    2 lines: lines bexpr . '\n'
   14 bexpr: bexpr . OR bexpr
   15      | bexpr . AND bexpr

    OR    shift, and go to state 33
    AND   shift, and go to state 34
    '\n'  shift, and go to state 35


State 11

    3 lines: lines comp . '\n'
   18 bexpr: comp .

    '\n'  shift, and go to state 36

    '\n'      [reduce using rule 18 (bexpr)]
    $default  reduce using rule 18 (bexpr)


State 12

    4 lines: lines declar . '\n'

    '\n'  shift, and go to state 37


State 13

    5 lines: lines assign . '\n'

    '\n'  shift, and go to state 38


State 14

   27 assign: ID '=' . expr ';'

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 40


State 15

   26 declar: KW_FRACT ID . ';'

    ';'  shift, and go to state 41


State 16

   12 expr: ID .

    $default  reduce using rule 12 (expr)


State 17

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   20 comp: expr . EQ expr
   21     | expr . NE expr
   22     | expr . LT expr
   23     | expr . GT expr
   24     | expr . LE expr
   25     | expr . GE expr

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    EQ   shift, and go to state 26
    NE   shift, and go to state 27
    LT   shift, and go to state 28
    GT   shift, and go to state 29
    LE   shift, and go to state 30
    GE   shift, and go to state 31


State 18

   14 bexpr: bexpr . OR bexpr
   15      | bexpr . AND bexpr
   16      | NOT bexpr .

    $default  reduce using rule 16 (bexpr)


State 19

   18 bexpr: comp .

    $default  reduce using rule 18 (bexpr)


State 20

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   11     | '(' expr . ')'
   20 comp: expr . EQ expr
   21     | expr . NE expr
   22     | expr . LT expr
   23     | expr . GT expr
   24     | expr . LE expr
   25     | expr . GE expr

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    EQ   shift, and go to state 26
    NE   shift, and go to state 27
    LT   shift, and go to state 28
    GT   shift, and go to state 29
    LE   shift, and go to state 30
    GE   shift, and go to state 31
    ')'  shift, and go to state 42


State 21

   14 bexpr: bexpr . OR bexpr
   15      | bexpr . AND bexpr
   17      | '(' bexpr . ')'

    OR   shift, and go to state 33
    AND  shift, and go to state 34
    ')'  shift, and go to state 43


State 22

    7 expr: expr '+' . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 44


State 23

    8 expr: expr '-' . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 45


State 24

    9 expr: expr '*' . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 46


State 25

   10 expr: expr '/' . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 47


State 26

   20 comp: expr EQ . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 48


State 27

   21 comp: expr NE . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 49


State 28

   22 comp: expr LT . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 50


State 29

   23 comp: expr GT . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 51


State 30

   24 comp: expr LE . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 52


State 31

   25 comp: expr GE . expr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 53


State 32

    1 lines: lines expr '\n' .

    $default  reduce using rule 1 (lines)


State 33

   14 bexpr: bexpr OR . bexpr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    BOOL   shift, and go to state 5
    NOT    shift, and go to state 7
    '('    shift, and go to state 8

    expr   go to state 17
    bexpr  go to state 54
    comp   go to state 19


State 34

   15 bexpr: bexpr AND . bexpr

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    BOOL   shift, and go to state 5
    NOT    shift, and go to state 7
    '('    shift, and go to state 8

    expr   go to state 17
    bexpr  go to state 55
    comp   go to state 19


State 35

    2 lines: lines bexpr '\n' .

    $default  reduce using rule 2 (lines)


State 36

    3 lines: lines comp '\n' .

    $default  reduce using rule 3 (lines)


State 37

    4 lines: lines declar '\n' .

    $default  reduce using rule 4 (lines)


State 38

    5 lines: lines assign '\n' .

    $default  reduce using rule 5 (lines)


State 39

   11 expr: '(' . expr ')'

    ID     shift, and go to state 16
    FRACT  shift, and go to state 4
    '('    shift, and go to state 39

    expr  go to state 56


State 40

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   27 assign: ID '=' expr . ';'

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    ';'  shift, and go to state 57


State 41

   26 declar: KW_FRACT ID ';' .

    $default  reduce using rule 26 (declar)


State 42

   11 expr: '(' expr ')' .

    $default  reduce using rule 11 (expr)


State 43

   17 bexpr: '(' bexpr ')' .

    $default  reduce using rule 17 (bexpr)


State 44

    7 expr: expr . '+' expr
    7     | expr '+' expr .
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr

    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 7 (expr)


State 45

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    8     | expr '-' expr .
    9     | expr . '*' expr
   10     | expr . '/' expr

    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 8 (expr)


State 46

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
    9     | expr '*' expr .
   10     | expr . '/' expr

    $default  reduce using rule 9 (expr)


State 47

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   10     | expr '/' expr .

    $default  reduce using rule 10 (expr)


State 48

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   20 comp: expr EQ expr .

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 20 (comp)


State 49

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   21 comp: expr NE expr .

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 21 (comp)


State 50

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   22 comp: expr LT expr .

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 22 (comp)


State 51

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   23 comp: expr GT expr .

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 23 (comp)


State 52

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   24 comp: expr LE expr .

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 24 (comp)


State 53

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   25 comp: expr GE expr .

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 25 (comp)


State 54

   14 bexpr: bexpr . OR bexpr
   14      | bexpr OR bexpr .
   15      | bexpr . AND bexpr

    AND  shift, and go to state 34

    $default  reduce using rule 14 (bexpr)


State 55

   14 bexpr: bexpr . OR bexpr
   15      | bexpr . AND bexpr
   15      | bexpr AND bexpr .

    $default  reduce using rule 15 (bexpr)


State 56

    7 expr: expr . '+' expr
    8     | expr . '-' expr
    9     | expr . '*' expr
   10     | expr . '/' expr
   11     | '(' expr . ')'

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    ')'  shift, and go to state 42


State 57

   27 assign: ID '=' expr ';' .

    $default  reduce using rule 27 (assign)
