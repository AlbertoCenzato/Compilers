%option noyywrap

%{
#include <math.h>
#include <string.h>
#include "parser.tab.h"
#include "fract.h"

extern YYSTYPE yylval;

%}

ws						[ \t\r\n]
linecomment			"//".*

number 	[0-9]+
fract  	"["([ ])*{number}([ ])*"|"([ ])*{number}([ ])*"]"
id			[A-Za-z]([A-Za-z]|[0-9]|_)*

relop  	"<"|">"|"=="|"<="|">="|"!="|"&&"|"||"


%x blockcomment

%%

{ws}|{linecomment}	{ ; }

bool				 { yylval.str = strdup(yytext); return KW_BOOL;  }
fract				 { yylval.str = strdup(yytext); return KW_FRACT; }
if					 { return IF; }
else				 { return ELSE; }
while				 { return WHILE; }

{id}					{ yylval.str = strdup(yytext); return ID; }
{fract}  			{ yylval.fract = fractLexicalAnalysis(yytext, yyleng); return FRACT; }
0|false	   	   { yylval.bool = 0; return BOOL; }
[1-9][0-9]*|true	{ yylval.bool = 1; return BOOL; }

"<"			{ return LT;  }
">"			{ return GT;  }
"=="			{ return EQ;  }
"<="			{ return LE;  }
">="			{ return GE;  }
"!="			{ return NE;  }
"&&"			{ return AND; }
"||"			{ return OR;  }
"!"		   { return NOT; }

"/*"						{ BEGIN(blockcomment); }
<blockcomment>"*/"	{ BEGIN(0); }
<blockcomment>.|\n	{ ; }


<<EOF>>		{ return END_OF_FILE; }

.	 			{ return yytext[0]; }

%%

void yyerror(char *s) { 
	fprintf(stderr, " Error: %s\n ", s);
}	